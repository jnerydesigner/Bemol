@startuml Component n3
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

Person(cliente, "Cliente", "Usuário do sistema que faz pedidos")



System_Boundary(spp_boundary, "Sistema de Processamento de Pedidos") {

  Container(apiGateway, "API Gateway BFF", "NestJS", "Recebe requisições dos clientes e envia para Order Controler")

' Order Micro Service
  Container_Boundary(orderService, "Order Micro Service") {
    Component(orderController, "Order Controller", "Controller", "Recebe requisições e coordena a criação de pedidos")
    Component(orderServiceComponent, "Order Service", "Service", "Lógica de negócio para processamento de pedidos")
    Component(orderRepository, "Order Repository", "Repository", "Consulta e atualiza o estado dos pedidos no banco de dados")
  }

  ' Payment Micro Service

  Container_Boundary(paymentService, "Payment Micro Service") {
     Component(paymentController, "Payment Controller", "Controller", "Recebe Chamada para Pagamento interno e externo")
    Component(paymentProcessor, "Payment Service", "Service", "Processa pagamentos com gateways externos")
    Component(paymentRepository, "Payment Repository", "Repository", "Armazena o estado de pagamentos")
    Component(paymentGatewayAdapter, "Payment Gateway Adapter", "Adapter", "Adapatdor do gateway de pagamentos")
  }

  Container_Boundary(productMicroservice, "Product Microservice"){
    Component(productController, "Product Controller", "Controller", "Gerencia requisições relacionadas a produtos")
    Component(productService, "Product Service", "Service", "Gerencia a lógica de negócio relacionada a produtos")
    Component(productRepository, "Product Repository", "Repository", "Armazena o estado dos produtos")
  }

  ' Inventory Micro Service

  Container_Boundary(inventoryService, "Inventory Micro Service") {
    Component(inventoryController, "Inventory Controller", "Controller", "Gerencia requisições relacionadas ao estoque")
    Component(inventoryServiceComponent, "Inventory Service", "Service", "Reserva e libera o estoque")
    Component(inventoryRepository, "Inventory Repository", "Repository", "Armazena o estado do inventário")
  }

  Container(messageBroker, "Message Broker", "RabbitMQ", "Centraliza a troca de mensagens entre os serviços")

  ContainerDb(databaseOrder, "DatabaseOrder", "PostgreSQL", "Armazena o estado dos pedidos")
  ContainerDb(databaseInventory, "DatabaseInventory", "PostgreSQL", "Armazena o estado do inventário")
  ContainerDb(databasePayment, "DatabasePayment", "PostgreSQL", "Armazena o estado dos pagamentos")
  ContainerDb(databaseProduct, "DatabaseProduct", "PostgreSQL", "Armazena os estado dos Produtos")
}





System_Boundary(paymentGatewaySystem, "Gateway de Pagamentos") {
  Component(paymentGateway, "Payment Gateway Fake", "Gateway (Ex: Strapi)", "Processa pagamentos com cartões de crédito")
}

' Order

Rel(cliente, apiGateway, "Faz requisições")

Rel(apiGateway, orderController, "Requisições de pedidos")
Rel(messageBroker, orderController, "Recebe eventos de Pedidos")
Rel(orderController, orderServiceComponent, "Coordena a lógica de negócio")
Rel(orderServiceComponent, messageBroker, "Publica eventos de pedidos")
Rel(orderServiceComponent, orderRepository, "Acessa o banco de dados")
Rel(orderRepository, databaseOrder, "Consulta e atualiza dados")



' Product

Rel(messageBroker, productController, "Recebe eventos de produtos")
Rel(productController, productService, "Chama a lógica de negócio")
Rel(productService, productRepository, "Persiste ou Recebe dados do Banco de Produtos")
Rel(productRepository, databaseProduct, "Acessa o banco de dados")
Rel(productService, messageBroker, "Publica eventos de produtos")



Rel(messageBroker, inventoryController, "Recebe eventos de Inventário")
Rel(inventoryController, inventoryServiceComponent, "Reserva e libera estoque")
Rel(inventoryServiceComponent, inventoryRepository, "Acessa o banco de dados")
Rel(inventoryRepository, databaseInventory, "Consulta e atualiza dados")
Rel(inventoryServiceComponent, messageBroker, "Publica eventos de Inventário")




' Payment
Rel(messageBroker, paymentController, "Recebe eventos de Pagamento")
Rel(paymentController, paymentProcessor, "Reserva e libera estoque")
Rel(paymentProcessor, paymentRepository, "Acessa o banco de dados")
Rel(paymentRepository, databasePayment, "Consulta e atualiza dados")
Rel(paymentProcessor, paymentGatewayAdapter, "Envia O Pagamento para o Gateway Externo Fake")
Rel(paymentGatewayAdapter, paymentProcessor, "Recebe os dados de pagamento")
Rel(paymentGatewayAdapter, paymentGateway, "Envia o Pagamento para o Gateway Externo Fake")
Rel(paymentGateway, paymentGatewayAdapter, "Recebe as Informações do Pagamento do gateway Fake")
Rel( paymentProcessor, messageBroker, "Envia eventos de Pagamento")


@enduml
