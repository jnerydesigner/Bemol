@startuml Component n3
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

Person(cliente, "Cliente", "Usuário do sistema que faz pedidos")



System_Boundary(spp_boundary, "Sistema de Processamento de Pedidos") {

  Container(apiGateway, "API Gateway BFF", "NestJS", "Recebe requisições dos clientes e envia para Order Controler")

' Order Micro Service
  Container_Boundary(orderService, "Order Micro Service") {
    Component(orderController, "Order Controller", "Controller", "Recebe requisições e coordena a criação de pedidos")
    Component(orderServiceComponent, "Order Service", "Service", "Lógica de negócio para processamento de pedidos")
    Component(orderRepository, "Order Repository", "Repository", "Consulta e atualiza o estado dos pedidos no banco de dados")
    Component(eventPublisher, "Event Publisher", "Publisher", "Publica eventos de criação e atualização de pedidos no Message Broker")
  }

  ' Payment Micro Service

  Container_Boundary(paymentService, "Payment Micro Service") {
    Component(paymentProcessor, "Payment Processor", "Service", "Processa pagamentos com gateways externos")
    Component(paymentRepository, "Payment Repository", "Repository", "Armazena o estado de pagamentos")
    Component(paymentEventPublisher, "Payment Event Publisher", "Publisher", "Publica eventos de pagamento no Message Broker")

    Component(paymentEventHandler, "Payment Event Handler", "Handler", "Ouve eventos de atualização de pagamentos no Message Broker")

    Component(paymentGatewayAdapter, "Payment Gateway Adapter", "Adapter", "Adapatdor do gateway de pagamentos")
  }

  ' Inventory Micro Service

  Container_Boundary(inventoryService, "Inventory Micro Service") {
    Component(inventoryController, "Inventory Controller", "Controller", "Gerencia requisições relacionadas ao estoque")
    Component(inventoryServiceComponent, "Inventory Service", "Service", "Reserva e libera o estoque")
    Component(inventoryRepository, "Inventory Repository", "Repository", "Armazena o estado do inventário")
    Component(inventoryEventPublisher, "Inventory Event Publisher", "Publisher", "Publica eventos de atualização de estoque no Message Broker")

    Component(inventoryEventHandler, "Inventory Event Handler", "Handler", "Ouve eventos de atualização de estoque no Message Broker")
  }

  Container(messageBroker, "Message Broker", "RabbitMQ", "Centraliza a troca de mensagens entre os serviços")

  ContainerDb(databaseOrder, "DatabaseOrder", "PostgreSQL", "Armazena o estado dos pedidos, pagamentos e inventário")
  ContainerDb(databaseInventory, "DatabaseInventory", "PostgreSQL", "Armazena o estado dos pedidos, pagamentos e inventário")
  ContainerDb(databasePayment, "DatabasePayment", "PostgreSQL", "Armazena o estado dos pedidos, pagamentos e inventário")
}

Rel(cliente, apiGateway, "Faz requisições")
Rel(apiGateway, orderController, "Requisições de pedidos")
Rel(orderController, orderServiceComponent, "Coordena a lógica de negócio")
Rel(orderServiceComponent, orderRepository, "Acessa o banco de dados")
Rel(orderServiceComponent, eventPublisher, "Publica eventos no Message Broker")


Rel(paymentProcessor, paymentRepository, "Acessa o banco de dados")
Rel(paymentProcessor, paymentEventPublisher, "Publica eventos de pagamento no Message Broker")

Rel(inventoryController, inventoryServiceComponent, "Reserva e libera estoque")
Rel(inventoryServiceComponent, inventoryRepository, "Acessa o banco de dados")
Rel(inventoryServiceComponent, inventoryEventPublisher, "Publica eventos de estoque no Message Broker")

Rel(eventPublisher, messageBroker, "Publica eventos")
Rel(paymentEventPublisher, messageBroker, "Publica eventos")
Rel(inventoryEventPublisher, messageBroker, "Publica eventos")
Rel(orderRepository, databaseOrder, "Consulta e atualiza dados")
Rel(paymentRepository, databasePayment, "Consulta e atualiza dados")
Rel(inventoryRepository, databaseInventory, "Consulta e atualiza dados")

Rel(messageBroker, inventoryEventHandler, "Ouve eventos de Inventory")
Rel(inventoryEventHandler, inventoryServiceComponent, "Envia para Business Logic o evento")

Rel(messageBroker, paymentEventHandler, "Ouve eventos de Inventory")
Rel(paymentEventHandler, paymentProcessor, "Envia para Business Logic o evento")

System_Boundary(paymentGatewaySystem, "Gateway de Pagamentos") {
  Component(paymentGateway, "Payment Gateway", "Gateway (Ex: Strapi)", "Processa pagamentos com cartões de crédito")
}

Rel(paymentGateway, paymentGatewayAdapter, "Webhook com os dados do pagamento")
Rel(paymentProcessor, paymentGatewayAdapter,"Envia o Pagamento para ser processado no gateway")
Rel(paymentGatewayAdapter, paymentProcessor,"Envia o Pagamento para ser processado no gateway")
Rel(paymentGatewayAdapter, paymentGateway,"Envia o Pagamento para ser processado no gateway")

@enduml
