@startuml Code n4
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

Container_Boundary(paymentServiceAndProcess, "Payment Service and Process") {
    Component(paymentController, "Payment Controller", "Controller", "Recebe requisições HTTP relacionadas a pagamentos")
    Component(paymentRepository, "Payment Repository", "Repository", "Realiza operações de persistência de pedidos")
    Component(paymentService, "Payment Service", "Business Logic", "Chama o Repository e Persiste na Base de Dados e Publica Eventos para os Microserviços")
    Component(paymentGatewayAdapter, "Payment Gateway Adapter", "Adapter", "Adapatdor do gateway de pagamentos")
    
}
  ContainerDb(database, "Database", "PostgreSQL", "Armazena o estado dos pagamentos")
  Container(broker, "Message Broker", "RabbitMQ", "Centraliza a troca de mensagens entre serviços")

  System_Boundary(paymentGatewaySystem, "Gateway de Pagamentos") {
  Component(paymentGateway, "Payment Gateway Fake", "Gateway (Ex: Strapi)", "Processa pagamentos com cartões de crédito")
}



Rel(broker, paymentController, "Processa eventos de pedidos consumidos do Message Broker")
Rel(paymentService, broker, "Processa eventos de pedidos consumidos do Message Broker")
Rel(paymentController, paymentService, "Chama a Camada de Negócios")
Rel(paymentService, paymentRepository, "Contem a Logica de acesso a camada de persistencia do Banco de Dados")
Rel(paymentService, paymentGatewayAdapter, "Faz a requisição de pagamento para o gateway")
Rel(paymentGatewayAdapter, paymentGateway, "Chama o Gateway de Pagamentos Fake")
Rel(paymentGateway, paymentGatewayAdapter , "Recebe os dados do Gateway de Pagamentos Fake")
Rel(paymentRepository, database, "Armazena estado de pagamentos")

@enduml
